# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
from buildbot.plugins import worker

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKER init scripts
init_script = '''#!/bin/bash
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

# add a debuguser
useradd -p '*' debuguser

# https://wiki.yoctoproject.org/wiki/How_to_enable_KVM_for_Poky_qemu
sudo groupadd --system kvm
sudo gpasswd -a ubuntu kvm
sudo chown root:kvm /dev/kvm
sudo chmod 0660 /dev/kvm

sudo apt-get update
sudo apt install buildbot-worker xfsprogs nfs-common curl -y

# install additional packages from yocto https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html
sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev xterm python3-subunit mesa-common-dev zstd liblz4-tool libtinfo5 mtools -y


# mount sstate volume
sudo mkdir /sstate
sudo mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport {}:/ /sstate
sudo chown ubuntu: /sstate


# mount data volume
# nvme1n1 is default for nitro based instance types, regardless if you configure /dev/xvdf
if [ -b /dev/nvme1n1 ]; then
   FILE=/dev/nvme1n1
elif [ -b /dev/xvdf ]; then
   FILE=/dev/xvdf
else
   echo "No EBS device exists. Not enough space to build something"
   exit 1
fi

sudo mkdir /data
sudo mkfs -t xfs $FILE
sudo mount $FILE /data

cd /data
sudo mkdir buildbot
sudo chown ubuntu: buildbot
cd buildbot
sudo -u ubuntu bash -c 'buildbot-worker create-worker worker buildbot.service:9989 {} sekrit'
sudo sh -c "cat <<EOM >/etc/systemd/system/buildbot-worker.service
[Unit]
Description=Buildbot Worker
After=network.target
[Service]
User=ubuntu
Group=ubuntu
WorkingDirectory=/data/buildbot/
ExecStart=/bin/buildbot-worker start --nodaemon worker
# if using EC2 Latent worker, you want to uncomment following line, and comment out the Restart line
ExecStopPost=sudo shutdown now
Restart=no
[Install]
WantedBy=multi-user.target
EOM"
echo "TODO: aws4embeddedlinux" > /data/buildbot/worker/info/admin
echo "TODO: host info" > /data/buildbot/worker/info/host
sudo systemctl enable buildbot-worker.service
sudo systemctl start buildbot-worker.service
'''

c['workers'] = []
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers nvme1

####### GIT POLLER DIR

gitpoller_workdir = '/mount/data/gitpoller_workdir'

####reload user.cfg factory
reload_config_factory = util.BuildFactory()
reload_config_factory.addStep(steps.MasterShellCommand(command="git clone " + os.environ.get('CODECOMMIT_REPOSITORY_CLONE_URL_GRC', 'default') + " && rm -rf userconfig/* && cp buildbot-user-repo/* userconfig/ && rm -rf buildbot-user-repo && cat admin.cfg > master.cfg && cat userconfig/user.cfg >> master.cfg", env={'PATH': ["/home/user","${PATH}"]}, name="checkout changed configuration", description=" user.py is stored in a codecommit repo"))
reload_config_factory.addStep(steps.MasterShellCommand(command="killall -SIGHUP python3", name="reload buildbot configuration", description="will send a SIGHUP to buildbot process"))

c['workers'].append(worker.LocalWorker('bot1'))

c['builders'].append(util.BuilderConfig(name="reload_config_factory",workernames=["bot1"],factory=reload_config_factory))

c['change_source'].append(changes.GitPoller(
        os.environ.get('CODECOMMIT_REPOSITORY_CLONE_URL_GRC', 'default'),
        workdir='gitpoller-workdir',
        branches='main',
        pollinterval=6,
        pollRandomDelayMin=3,
        pollRandomDelayMax=5))   

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="tree_stable_reload_buildbot_configuration",
                            change_filter=util.ChangeFilter(branch="main",repository=os.environ.get('CODECOMMIT_REPOSITORY_CLONE_URL_GRC', 'default')),
                            treeStableTimer=10,
                            builderNames=["reload_config_factory"]))

####### REPORTER TARGETS

# 'services' is a list of Reporter Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "aws4embeddedlinux buildbot"
c['titleURL'] = "aws4embeddedlinux buildbot"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

weburl = os.environ.get("BUILDBOT_WEB_URL", "default")
c['buildbotURL'] = weburl.lower() + "/"

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={},))

# GitHub webhook receiver
c['www']['change_hook_dialects'] = {'github': {}}

####### DB URL

c['db'] = {
   "db_url": os.environ.get("BUILDBOT_DB_URL", "sqlite:////mount/data/buildbot.db"),
}

c['protocols'] = {'pb': {'port': 9989}}

# send usage data
c['buildbotNetUsageData'] = None


######## AMI
# find the correct one for your region here: https://cloud-images.ubuntu.com/locator/ec2/


# us-west-2
# x86_64_ami = 'ami-0ee3d9a8776e8b99c'
# arm64_ami = 'ami-0817b9078575a7d59'

# eu-central-1
x86_64_ami = 'ami-088a4bdad130d7795'
arm64_ami = 'ami-07b9d4b65220d2cad'



######## SSTATE
sstate_efs_dns_name = os.environ.get('BUILDBOT_WORKER_SSTATE_EFS_FS_ID', 'default')+".efs."+ os.environ.get('AWS_REGION', 'default') + ".amazonaws.com"


##### clean sstate #######################################################################################################

clean_sstate_factory = util.BuildFactory()
clean_sstate_factory.addStep(steps.ShellCommand(command='cd /sstate && rm -rfv *'))
workername = "clean_sstate_worker"
c['workers'].append(worker.EC2LatentWorker(workername, 'sekrit', 'c5.metal',
                                 ami=x86_64_ami,
                                 build_wait_timeout=0,
                                 keypair_name='worker-key',
                                 security_group_ids=[os.environ.get('BUILDBOT_WORKER_SECURITY_GROUP', 'default'),],
                                 subnet_id=os.environ.get('BUILDBOT_WORKER_SUBNET', 'default'),
                                 user_data=init_script.format(sstate_efs_dns_name, workername),
                                 block_device_map= [
                              {
                                 "DeviceName": "/dev/xvdf",
                                 "Ebs" : {
                                    "VolumeType": "gp3",
                                    "Iops": 16000,
                                    "VolumeSize": 500,
                                    "Throughput": 1000,
                                    "DeleteOnTermination": True, 
                                 }
                              }
                              ],
                                 ))
buildername = "clean_sstate_builder"
c['builders'].append(
   util.BuilderConfig(name=buildername,
      workernames=[workername],
      factory=clean_sstate_factory))
schedulername = "clean_sstate"
c['schedulers'].append(
      schedulers.ForceScheduler(
      name=schedulername,
      builderNames=[buildername],
      buttonName="force"))

####################################################################################
#
# this should be in user.py
#
####################################################################################


####### INSTANCE TEST
factory2 = util.BuildFactory()
factory2.addStep(steps.ShellCommand(command="lsblk && mount", name="debug info", description="check the EBS / EFS"))
factory2.addStep(steps.Git(repourl='https://github.com/thomas-roos/yocto_example.git', branch="test_sstate", submodules=True, name="checkout source"))
factory2.addStep(steps.ShellCommand(command="./download.sh", name="download", description="download all sources"))
factory2.addStep(steps.ShellCommand(command="./build.sh", name="build", description="build test"))
factory2.addStep(steps.ShellCommand(command="./test.sh", name="test", description="do ptest"))

x86_64_instance_types = ["m6i.metal", "c6a.8xlarge", "m6i.8xlarge","m6in.16xlarge","m6a.24xlarge","m6i.24xlarge","c6i.24xlarge","c6a.24xlarge"]
arm_64_instance_types = ["c6g.metal", "c7g.metal", "c6g.16xlarge","c7g.16xlarge"]

for instance in x86_64_instance_types:
   c['workers'].append(worker.EC2LatentWorker(instance.replace(".", "_"), 'sekrit', instance,
                                 ami=x86_64_ami,
                                 build_wait_timeout=0,
                                 keypair_name='worker-key',
                                 security_group_ids=[os.environ.get('BUILDBOT_WORKER_SECURITY_GROUP', 'default'),],
                                 subnet_id=os.environ.get('BUILDBOT_WORKER_SUBNET', 'default'),
                                 user_data=init_script.format(sstate_efs_dns_name, instance.replace(".", "_")),
                                 block_device_map= [
                              {
                                 "DeviceName": "/dev/xvdf",
                                 "VirtualName":"data",
                                 "Ebs" : {
                                    "VolumeType": "gp3",
                                    "Iops": 16000,
                                    "VolumeSize": 100,
                                    "Throughput": 1000,
                                    "DeleteOnTermination": True,
                                 }
                              }
                              ]
                                 ))

for instance in arm_64_instance_types:
   c['workers'].append(worker.EC2LatentWorker(instance.replace(".", "_"), 'sekrit', instance,
                                 ami=arm64_ami,
                                 build_wait_timeout=0,
                                 keypair_name='worker-key',
                                 security_group_ids=[os.environ.get('BUILDBOT_WORKER_SECURITY_GROUP', 'default'),],
                                 subnet_id=os.environ.get('BUILDBOT_WORKER_SUBNET', 'default'),
                                 user_data=init_script.format(sstate_efs_dns_name, instance.replace(".", "_")),
                                 block_device_map= [
                              {
                                 "DeviceName": "/dev/xvdf",
                                 "VirtualName":"data",
                                 "Ebs" : {
                                    "VolumeType": "gp3",
                                    "Iops": 16000,
                                    "VolumeSize": 100,
                                    "Throughput": 1000,
                                    "DeleteOnTermination": True,
                                 }
                              }
                              ]))

for instance in x86_64_instance_types + arm_64_instance_types:
    c['schedulers'].append(schedulers.ForceScheduler(
                                name=instance.replace(".", "_"),
                                builderNames=[instance.replace(".", "_")]))

    c['builders'].append(
       util.BuilderConfig(name=instance.replace(".", "_"),
         workernames=[instance.replace(".", "_")],
         factory=factory2))


##### meta-aws release tests #######################################################################################################
meta_aws_supported_releases = ["master", "kirkstone", "dunfell", "mickledore"]
meta_aws_supported_releases_next = ["master-next", "kirkstone-next", "dunfell-next", "mickledore-next"]
meta_aws_supported_x86_archs = ["qemux86-64"]
meta_aws_supported_arm_archs = ["qemuarm64"]

c['change_source'].append(changes.GitPoller(
        "https://github.com/aws4embeddedlinux/meta-aws.git",
        workdir=gitpoller_workdir,
        branches=meta_aws_supported_releases_next,
        pollAtLaunch=True,
        pollinterval=360,
        pollRandomDelayMin=30,
        pollRandomDelayMax=350))   

c['change_source'].append(changes.GitPoller(
        "https://github.com/yoctoproject/poky.git",
        workdir=gitpoller_workdir,
        branches=meta_aws_supported_releases,
        pollAtLaunch=True,
        pollinterval=360,
        pollRandomDelayMin=30,
        pollRandomDelayMax=350))

c['change_source'].append(changes.GitPoller(
        "https://github.com/openembedded/meta-openembedded.git",
        workdir=gitpoller_workdir,
        branches=meta_aws_supported_releases,
        pollAtLaunch=True,
        pollinterval=360,
        pollRandomDelayMin=30,
        pollRandomDelayMax=350))   

for release in meta_aws_supported_releases:
   for arch in meta_aws_supported_x86_archs:
      meta_aws_release_factory = util.BuildFactory()     
      meta_aws_release_factory.addStep(steps.ShellCommand(command='git clone https://github.com/aws4embeddedlinux/meta-aws-ci.git --depth=1 --single-branch'))
      meta_aws_release_factory.addStep(steps.ShellCommand(command='cd meta-aws-ci/meta-aws-tests/ && BB_ENV_PASSTHROUGH_ADDITIONS="SSTATE_DIR $BB_ENV_PASSTHROUGH_ADDITIONS" SSTATE_DIR="/sstate"  ./meta-aws-tests.sh --releases=' + release + ' --arch='+ arch))

      workername = "meta_aws_release_worker_" + release + "_" + arch.replace("-", "_")
      c['workers'].append(worker.EC2LatentWorker(workername, 'sekrit', 'c5.metal',
                                       ami=x86_64_ami,
                                       build_wait_timeout=0,
                                       keypair_name='worker-key',
                                       security_group_ids=[os.environ.get('BUILDBOT_WORKER_SECURITY_GROUP', 'default'),],
                                       subnet_id=os.environ.get('BUILDBOT_WORKER_SUBNET', 'default'),
                                       user_data=init_script.format(sstate_efs_dns_name, workername),
                                       block_device_map= [
                                    {
                                       "DeviceName": "/dev/xvdf",
                                       "Ebs" : {
                                          "VolumeType": "gp3",
                                          "Iops": 16000,
                                          "VolumeSize": 500,
                                          "Throughput": 1000,
                                          "DeleteOnTermination": True,
                                       }
                                    }
                                    ],
                                       ))

      buildername = "meta_aws_release_builder_" + release + "_" + arch.replace("-", "_")
      c['builders'].append(
         util.BuilderConfig(name=buildername,
            workernames=[workername],
            factory=meta_aws_release_factory))

      schedulername = "meta-aws_release_tests_" + release + "_" + arch.replace("-", "_")
      c['schedulers'].append(
            schedulers.ForceScheduler(
            name=schedulername,
            builderNames=[buildername],
            buttonName="force"))

      c['schedulers'].append(schedulers.SingleBranchScheduler(
                                  name="check_meta_aws_" + release + "_" + arch.replace("-", "_"),
                                  change_filter=util.ChangeFilter(branch=release+"-next",repository="https://github.com/aws4embeddedlinux/meta-aws.git"),
                                  treeStableTimer=30*60,
                                  builderNames=[buildername]))
      c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="check_poky_" + release + "_" + arch.replace("-", "_"),
                            change_filter=util.ChangeFilter(branch=release,repository="https://github.com/yoctoproject/poky.git"),
                            treeStableTimer=30*60,
                            builderNames=[buildername]))
      c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="check_oe_" + release + "_" + arch.replace("-", "_"),
                            change_filter=util.ChangeFilter(branch=release,repository="https://github.com/openembedded/meta-openembedded.git"),
                            treeStableTimer=30*60,
                            builderNames=[buildername]))

   for arch in meta_aws_supported_arm_archs:
      meta_aws_release_factory = util.BuildFactory()     
      meta_aws_release_factory.addStep(steps.ShellCommand(command='git clone https://github.com/aws4embeddedlinux/meta-aws-ci.git --depth=1 --single-branch'))
      meta_aws_release_factory.addStep(steps.ShellCommand(command='cd meta-aws-ci/meta-aws-tests/ && BB_ENV_PASSTHROUGH_ADDITIONS="SSTATE_DIR $BB_ENV_PASSTHROUGH_ADDITIONS" SSTATE_DIR="/sstate"  ./meta-aws-tests.sh --releases=' + release + ' --arch='+ arch))

      workername = "meta_aws_release_worker_" + release + "_" + arch.replace("-", "_")
      c['workers'].append(worker.EC2LatentWorker(workername, 'sekrit', 'c7g.metal',
                                       ami=arm64_ami,
                                       build_wait_timeout=0,
                                       keypair_name='worker-key',
                                       security_group_ids=[os.environ.get('BUILDBOT_WORKER_SECURITY_GROUP', 'default'),],
                                       subnet_id=os.environ.get('BUILDBOT_WORKER_SUBNET', 'default'),
                                       user_data=init_script.format(sstate_efs_dns_name, workername),
                                       block_device_map= [
                                    {
                                       "DeviceName": "/dev/xvdf",
                                       "Ebs" : {
                                          "VolumeType": "gp3",
                                          "Iops": 16000,
                                          "VolumeSize": 500,
                                          "Throughput": 1000,
                                          "DeleteOnTermination": True,
                                       }
                                    }
                                    ],
                                       ))

      buildername = "meta_aws_release_builder_" + release + "_" + arch.replace("-", "_")
      c['builders'].append(
         util.BuilderConfig(name=buildername,
            workernames=[workername],
            factory=meta_aws_release_factory))

      schedulername = "meta-aws_release_tests_" + release + "_" + arch.replace("-", "_")
      c['schedulers'].append(
            schedulers.ForceScheduler(
            name=schedulername,
            builderNames=[buildername],
            buttonName="force"))

      c['schedulers'].append(schedulers.SingleBranchScheduler(
                                  name="check_meta_aws_" + release + "_" + arch.replace("-", "_"),
                                  change_filter=util.ChangeFilter(branch=release+"-next",repository="https://github.com/aws4embeddedlinux/meta-aws.git"),
                                  treeStableTimer=30*60,
                                  builderNames=[buildername]))
      c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="check_poky_" + release + "_" + arch.replace("-", "_"),
                            change_filter=util.ChangeFilter(branch=release,repository="https://github.com/yoctoproject/poky.git"),
                            treeStableTimer=30*60,
                            builderNames=[buildername]))
      c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="check_oe_" + release + "_" + arch.replace("-", "_"),
                            change_filter=util.ChangeFilter(branch=release,repository="https://github.com/openembedded/meta-openembedded.git"),
                            treeStableTimer=30*60,
                            builderNames=[buildername]))

##### meta-aws-demos tests #######################################################################################################

c['change_source'].append(changes.GitPoller(
        "https://github.com/aws4embeddedlinux/meta-aws-demos.git",
        workdir=gitpoller_workdir,
        branches=True,
        pollAtLaunch=True,
        pollinterval=600,
        pollRandomDelayMin=300,
        pollRandomDelayMax=500))   


meta_aws_demos_supported_branches = ["master", "master-next"]

for branch in meta_aws_demos_supported_branches:
   meta_aws_release_factory = util.BuildFactory()
   meta_aws_release_factory.addStep(steps.Git(repourl='https://github.com/aws4embeddedlinux/meta-aws-demos.git', mode='full', submodules=True, branch=branch))
   meta_aws_release_factory.addStep(steps.ShellCommand(command=['/bin/bash', '-c', '''. init-build-env && for d in $(get_devices); do BB_ENV_PASSTHROUGH_ADDITIONS="SSTATE_DIR $BB_ENV_PASSTHROUGH_ADDITIONS" SSTATE_DIR="/sstate" BUILD_DEVICE=$d bitbake aws-biga-image; done ''']))
   workername = "meta_aws_demos_release_worker_"+branch
   c['workers'].append(worker.EC2LatentWorker(workername, 'sekrit', 'c5.metal',
                                    ami=x86_64_ami,
                                    build_wait_timeout=0,
                                    keypair_name='worker-key',
                                    security_group_ids=[os.environ.get('BUILDBOT_WORKER_SECURITY_GROUP', 'default'),],
                                    subnet_id=os.environ.get('BUILDBOT_WORKER_SUBNET', 'default'),
                                    user_data=init_script.format(sstate_efs_dns_name, workername),
                                    block_device_map= [
                                 {
                                    "DeviceName": "/dev/xvdf",
                                    "Ebs" : {
                                       "VolumeType": "gp3",
                                       "Iops": 16000,
                                       "VolumeSize": 500,
                                       "Throughput": 1000,
                                       "DeleteOnTermination": True,
                                    }
                                 }
                                 ],
                                    ))
   buildername = "meta_aws_demos_release_builder_"+branch
   c['builders'].append(
      util.BuilderConfig(name=buildername,
         workernames=[workername],
         factory=meta_aws_release_factory))
   schedulername = "meta-aws_demos_release_tests_"+branch
   c['schedulers'].append(
         schedulers.ForceScheduler(
         name=schedulername,
         builderNames=[buildername],
         buttonName="force"))
   c['schedulers'].append(schedulers.SingleBranchScheduler(
                               name="meta_aws_demos_release_builder_treestable_"+branch,
                               change_filter=util.ChangeFilter(branch=branch,repository="https://github.com/aws4embeddedlinux/meta-aws-demos.git"),
                               treeStableTimer=30*60,
                               builderNames=[buildername]))


#   c['schedulers'].append(
#      schedulers.Nightly(name="weekly-meta_aws_demos_release_builder_"+branch,
#                           builderNames=[buildername], hour=3, minute=1))
                       

#### user.cfg gets pasted at the end of this file ####
